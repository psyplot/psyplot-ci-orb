version: 2.1

orbs:
  # Replace this with your own!
  psyplot-ci-orb: psyplot/psyplot-ci-orb@<<pipeline.parameters.dev-orb-version>>
  mattermost-plugin-notify: nathanaelhoun/mattermost-plugin-notify@1.2.0
  orb-tools: circleci/orb-tools@10.0
  bats: circleci/bats@1.0
  shellcheck: circleci/shellcheck@2.0

executors:
  default:
    machine: true
  macos-executor:
    macos:
      xcode: 12.2.0

# Pipeline Parameters
## These parameters are used internally by orb-tools. Skip to the Jobs section.
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  unit-test-executor:
    description: Executor for the unit tests. Can be default or macos-executor
    type: string
    default: default
  build_output:
    description: The output directory for the build
    type: enum
    default: linux-64
    enum: ["linux-64", "osx-64"]
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"

jobs:
  # Define one or more jobs which will utilize your orb's commands and parameters to validate your changes.
  integration-test-configure:
    machine: true
    steps:
      - attach_workspace:
          at: "~"
      - psyplot-ci-orb/configure-conda
      - psyplot-ci-orb/install-opengl
  deploy-python:
    machine: true
    steps:
      - checkout
      - run:
          command: git fetch --tags origin
      - psyplot-ci-orb/install-conda
      - psyplot-ci-orb/configure-conda
      - run:
          name: Build python package
          command: |
            which conda || eval "$("${HOME}"/miniconda3/bin/conda shell.bash hook)"
            pip install .
            python setup.py sdist
      - run:
          name: Check python tag
          command: |
            which conda || eval "$("${HOME}"/miniconda3/bin/conda shell.bash hook)"
            VERSION=`deploy-conda-recipe -V`
            TAG=`git describe`
            if [ "${TAG:1}" == "${VERSION}" ]; then
              # make sure the version is in the deploy-pkg.yml and configure-conda.yml
              [ "$(grep ${VERSION} src/commands/deploy-pkg.yml)" != "" ]
              [ "$(grep ${VERSION} src/commands/configure-conda.yml)" != "" ]
            fi
      - run:
          name: deploy python package
          command: |
            which conda || eval "$("${HOME}"/miniconda3/bin/conda shell.bash hook)"
            anaconda upload dist/psyplot-ci-orb*.tar.gz

workflows:
  # Prior to producing a development orb (which requires credentials) basic validation, linting, and even unit testing can be performed.
  # This workflow will run on every commit
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint # Lint Yaml files
      - orb-tools/pack # Pack orb source
      - shellcheck/check:
          dir: ./src/scripts
          exclude: SC2148,SC2001,SC2129
      # optional: Run BATS tests against your scripts
      - bats/run:
          name: unit-tests
          path: ./src/tests
          exec_environment: << pipeline.parameters.unit-test-executor >>
      # If you accept building open source forks, protect your secrects behind a restricted context.
      # A job containing restricted context (which holds your orb publishing credentials) may only be accessed by a user with proper permissions.
      # An open source user may begin a pipeline with a PR, and once the pipeline is approved by an authorized user at this point, the pipeline will continue with the proper context permissions.
      - mattermost-plugin-notify/approval-notification:
          message: Hello @all! A workflow on https://app.circleci.com/pipelines/github/psyplot/psyplot-ci-orb is awaiting your approval.
          context: mattermost
          requires:
            - orb-tools/lint
            - orb-tools/pack
            - unit-tests
            - shellcheck/check
      - hold-for-dev-publish:
          type: approval
          requires:
            - mattermost-plugin-notify/approval-notification
      # Publish development version(s) of the orb.
      - orb-tools/publish-dev:
          orb-name: psyplot/psyplot-ci-orb
          context: orb-publishing # A restricted context containing your private publishing credentials. Will only execute if approved by an authorized user.
          requires: [hold-for-dev-publish]
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  # This `integration-test_deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Run any integration tests defined within the `jobs` key.
      - psyplot-ci-orb/install-and-build:
          name: integration-test-install
          build_recipe: false
          source: src/tests/test-docs
          # temporary disable building of docs
          docs_environment: src/tests/test-docs/environment.yml
          environment_file: src/tests/test-tests/environment.yml
          build_dir: src/tests/test-docs/_build
          build_output: <<pipeline.parameters.build_output>>
      - integration-test-configure:
          requires:
            - integration-test-install
      - psyplot-ci-orb/test-parallel:
          name: integration-test-parallel
          requires:
            - integration-test-install
          test_dir: src/tests/test-tests
          packages: docrep  # install an extra package
          parallelism: 2
      - psyplot-ci-orb/test-parallel:
          name: integration-test-parallel-stop
          run-job: false
          parallelism: 2
      - psyplot-ci-orb/deploy-docs:
          name: integration-test-docs
          requires:
            - integration-test-install
          deploy_dir: src/tests/test-docs/_build/html
          dry_run: true
          fingerprint: ""
      # Publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          name: publish-orb
          orb-name: psyplot/psyplot-ci-orb
          context: orb-publishing
          add-pr-comment: true
          pr-number-sed-expression: 's/\[.*\]*.* (#\([0-9]*\))/\1/p'
          bot-user: psyplot-admin
          bot-token-variable: GITHUB_TOKEN
          fail-if-semver-not-indicated: true
          publish-version-tag: true
          ssh-fingerprints: 77:a2:25:de:77:ea:3e:46:97:3c:cd:f7:6c:88:42:12
          requires:
            - integration-test-parallel
            - integration-test-parallel-stop
            - integration-test-configure
            - integration-test-docs
          filters:
            branches:
              only: main
      - deploy-python:
          context: anaconda
          requires:
            - publish-orb
